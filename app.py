import streamlit as st
import pandas as pd
import os
from zipfile import ZipFile
import shutil

# ----------------------------------------
# Inicializaci√≥n de carpetas y funciones
# ----------------------------------------

def inicializar_carpetas():
    tipos = ["Alumbrado", "Envolvente", "Ventana", "Equipos_de_Clima", "Equipos_de_Aire", "Motor_Bomba", "Caldera"]
    for tipo in tipos:
        os.makedirs(f"Fotos_{tipo}", exist_ok=True)

def guardar_datos(tipo, datos):
    nombre_archivo = f"{tipo}.xlsx"
    if os.path.exists(nombre_archivo):
        df_existente = pd.read_excel(nombre_archivo)
        df_nuevo = pd.concat([df_existente, pd.DataFrame([datos])], ignore_index=True)
    else:
        df_nuevo = pd.DataFrame([datos])
    df_nuevo.to_excel(nombre_archivo, index=False)

def crear_zip():
    with ZipFile("datos_visita.zip", "w") as zipf:
        # A√±adir Excels
        for archivo in os.listdir():
            if archivo.endswith(".xlsx"):
                zipf.write(archivo)
        # A√±adir carpetas de fotos
        carpetas = [d for d in os.listdir() if os.path.isdir(d) and d.startswith("Fotos_")]
        for carpeta in carpetas:
            for root, _, files in os.walk(carpeta):
                for file in files:
                    zipf.write(os.path.join(root, file))

# Inicializamos carpetas
inicializar_carpetas()

# ----------------------------------------
# INTERFAZ Streamlit
# ----------------------------------------

st.title("üè¢ Registro de Visita de Certificaci√≥n/Auditor√≠a Energ√©tica")

tipo_elemento = st.selectbox(
    "Selecciona el tipo de elemento que quieres registrar:",
    ["", "Alumbrado", "Envolvente", "Ventana", "Equipos de Clima", "Equipos de Aire", "Motor/Bomba", "Caldera"]
)

if st.button("Introducir datos"):
    if tipo_elemento == "":
        st.warning("¬°Selecciona un tipo de elemento antes de continuar!")
    else:
        st.session_state["tipo_elemento"] = tipo_elemento
        st.rerun()

if "tipo_elemento" in st.session_state:
    tipo = st.session_state["tipo_elemento"]
    st.header(f"Formulario de registro: {tipo}")

    # ---- FORMULARIOS ----
    with st.form(key=f"formulario_{tipo}"):
        proyecto = st.text_input("Proyecto")
        tecnico = st.text_input("T√©cnico")
        
        if tipo == "Alumbrado":
            dependencia = st.text_input("Dependencia")
            descripcion = st.text_area("Descripci√≥n")
            num_luminarias = st.number_input("N√∫mero de luminarias", min_value=0, step=1)
            num_lamparas = st.number_input("N√∫mero de l√°mparas por luminaria", min_value=0, step=1)
            tecnologia = st.text_input("Tecnolog√≠a de l√°mpara")
            modelo = st.text_input("Modelo de l√°mpara")
            fotografia = st.file_uploader("Fotograf√≠a", type=["jpg", "png", "jpeg"])

            datos = {
                "Proyecto": proyecto, "T√©cnico": tecnico, "Dependencia": dependencia, "Descripci√≥n": descripcion,
                "N√∫mero luminarias": num_luminarias, "N√∫mero l√°mparas por luminaria": num_lamparas,
                "Tecnolog√≠a l√°mpara": tecnologia, "Modelo l√°mpara": modelo, "Fotograf√≠a": ""
            }

        elif tipo == "Envolvente":
            espacio = st.text_input("Espacio")
            tipologia = st.text_input("Tipolog√≠a")
            orientacion = st.selectbox("Orientaci√≥n", ["Norte", "Sur", "Este", "Oeste", "NE", "NO", "SE", "SO"])
            altura = st.number_input("Altura (m)", min_value=0.0)
            ancho = st.number_input("Ancho (m)", min_value=0.0)
            estado = st.text_input("Estado")
            comentario = st.text_area("Comentario")
            fotografia = st.file_uploader("Fotograf√≠a", type=["jpg", "png", "jpeg"])

            datos = {
                "Proyecto": proyecto, "T√©cnico": tecnico, "Espacio": espacio, "Tipolog√≠a": tipologia,
                "Orientaci√≥n": orientacion, "Altura": altura, "Ancho": ancho, "Estado": estado,
                "Comentario": comentario, "Fotograf√≠a": ""
            }

        elif tipo == "Ventana":
            espacio = st.text_input("Espacio")
            marco = st.text_input("Marco")
            vidrio = st.text_input("Vidrio")
            orientacion = st.selectbox("Orientaci√≥n", ["Norte", "Sur", "Este", "Oeste", "NE", "NO", "SE", "SO"])
            altura = st.number_input("Altura (m)", min_value=0.0)
            ancho = st.number_input("Ancho (m)", min_value=0.0)
            estado = st.text_input("Estado")
            comentario = st.text_area("Comentario")
            fotografia = st.file_uploader("Fotograf√≠a", type=["jpg", "png", "jpeg"])

            datos = {
                "Proyecto": proyecto, "T√©cnico": tecnico, "Espacio": espacio, "Marco": marco, "Vidrio": vidrio,
                "Orientaci√≥n": orientacion, "Altura": altura, "Ancho": ancho, "Estado": estado,
                "Comentario": comentario, "Fotograf√≠a": ""
            }

        elif tipo == "Equipos de Clima":
            espacio = st.text_input("Espacio Servicio")
            refrigerante = st.text_input("Refrigerante")
            capacidad_calorifica = st.number_input("Capacidad Calor√≠fica (kW)", min_value=0.0)
            consumo_calor = st.number_input("Consumo Calor (kW)", min_value=0.0)
            cop = st.number_input("COP", min_value=0.0)
            capacidad_frigorifica = st.number_input("Capacidad Frigor√≠fica (kW)", min_value=0.0)
            consumo_frio = st.number_input("Consumo Fr√≠o (kW)", min_value=0.0)
            eer = st.number_input("EER", min_value=0.0)
            ano = st.number_input("A√±o", min_value=1900, max_value=2100, step=1)
            estado = st.text_input("Estado")
            comentario = st.text_area("Comentario")
            fotografia = st.file_uploader("Fotograf√≠a", type=["jpg", "png", "jpeg"])

            datos = {
                "Proyecto": proyecto, "T√©cnico": tecnico, "Espacio Servicio": espacio, "Refrigerante": refrigerante,
                "Capacidad Calor√≠fica": capacidad_calorifica, "Consumo Calor": consumo_calor, "COP": cop,
                "Capacidad Frigor√≠fica": capacidad_frigorifica, "Consumo Fr√≠o": consumo_frio, "EER": eer,
                "A√±o": ano, "Estado": estado, "Comentario": comentario, "Fotograf√≠a": ""
            }

        elif tipo == "Equipos de Aire":
            modelo = st.text_input("Modelo")
            cantidad = st.number_input("Cantidad", min_value=0, step=1)
            potencia_ventilador = st.number_input("Potencia Ventilador (kW)", min_value=0.0)
            bateria_calor = st.number_input("Bater√≠a de calor (kW)", min_value=0.0)
            bateria_frio = st.number_input("Bater√≠a de fr√≠o (kW)", min_value=0.0)
            caudal = st.number_input("Caudal (m¬≥/h)", min_value=0.0)
            espacio = st.text_input("Espacio Servicio")
            placa = st.file_uploader("Foto de la Placa", type=["jpg", "png", "jpeg"])
            fotografia = st.file_uploader("Fotograf√≠a general", type=["jpg", "png", "jpeg"])

            datos = {
                "Proyecto": proyecto, "T√©cnico": tecnico, "Modelo": modelo, "Cantidad": cantidad,
                "Potencia Ventilador": potencia_ventilador, "Bater√≠a Calor": bateria_calor,
                "Bater√≠a Fr√≠o": bateria_frio, "Caudal": caudal, "Espacio Servicio": espacio,
                "Foto Placa": "", "Fotograf√≠a": ""
            }

        elif tipo == "Motor/Bomba":
            funcion = st.text_input("Funci√≥n")
            potencia = st.number_input("Potencia (kW)", min_value=0.0)
            eficiencia = st.number_input("Eficiencia (%)", min_value=0.0, max_value=100.0)
            variador = st.selectbox("Variador", ["S√≠", "No"])
            espacio = st.text_input("Espacio")
            ano = st.number_input("A√±o", min_value=1900, max_value=2100, step=1)
            placa = st.file_uploader("Foto de la Placa", type=["jpg", "png", "jpeg"])
            fotografia = st.file_uploader("Fotograf√≠a general", type=["jpg", "png", "jpeg"])

            datos = {
                "Proyecto": proyecto, "T√©cnico": tecnico, "Funci√≥n": funcion, "Potencia": potencia,
                "Eficiencia": eficiencia, "Variador": variador, "Espacio": espacio, "A√±o": ano,
                "Foto Placa": "", "Fotograf√≠a": ""
            }

        elif tipo == "Caldera":
            uso = st.text_input("Uso")
            combustible = st.text_input("Combustible")
            potencia = st.number_input("Potencia (kW)", min_value=0.0)
            rendimiento = st.number_input("Rendimiento (%)", min_value=0.0, max_value=100.0)
            ano = st.number_input("A√±o", min_value=1900, max_value=2100, step=1)
            estado = st.text_input("Estado")
            comentario = st.text_area("Comentario")
            placa = st.file_uploader("Foto de la Placa", type=["jpg", "png", "jpeg"])
            fotografia = st.file_uploader("Fotograf√≠a general", type=["jpg", "png", "jpeg"])

            datos = {
                "Proyecto": proyecto, "T√©cnico": tecnico, "Uso": uso, "Combustible": combustible,
                "Potencia": potencia, "Rendimiento": rendimiento, "A√±o": ano, "Estado": estado,
                "Comentario": comentario, "Foto Placa": "", "Fotograf√≠a": ""
            }

        submit = st.form_submit_button("Guardar Datos")

        if submit:
            # Guardar fotograf√≠as si existen
            carpeta_fotos = f"Fotos_{tipo.replace(' ', '_')}"
            if fotografia:
                nombre_foto = f"{carpeta_fotos}/{proyecto}_{tecnico}_foto.jpg"
                with open(nombre_foto, "wb") as f:
                    f.write(fotografia.getbuffer())
                datos["Fotograf√≠a"] = nombre_foto
            if "placa" in locals() and placa:
                nombre_placa = f"{carpeta_fotos}/{proyecto}_{tecnico}_placa.jpg"
                with open(nombre_placa, "wb") as f:
                    f.write(placa.getbuffer())
                datos["Foto Placa"] = nombre_placa

            guardar_datos(tipo.replace(" ", "_"), datos)
            st.success("‚úÖ Datos guardados correctamente.")
            del st.session_state["tipo_elemento"]
            st.rerun()

# ----------------------------------------
# BOT√ìN FINAL: Descargar ZIP
# ----------------------------------------

st.markdown("---")
if st.button("üì• Descargar todos los datos en ZIP"):
    crear_zip()
    with open("datos_visita.zip", "rb") as f:
        st.download_button("Descargar ZIP", f, file_name="datos_visita.zip")
# ----------------------------------------
# BOT√ìN FINAL: Eliminar datos guardados
# ----------------------------------------

st.markdown("---")

# Estado para controlar confirmaciones
if "confirmar_borrado" not in st.session_state:
    st.session_state.confirmar_borrado = False

# Primer bot√≥n
if not st.session_state.confirmar_borrado:
    if st.button("üóëÔ∏è Eliminar todos los datos registrados"):
        st.session_state.confirmar_borrado = True

# Segundo bot√≥n de confirmaci√≥n
if st.session_state.confirmar_borrado:
    st.warning("‚ö†Ô∏è ¬øEst√°s absolutamente seguro de que quieres eliminar TODOS los datos? Esta acci√≥n no se puede deshacer.")
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("‚úÖ S√≠, eliminar todo"):
            # Borrar Excels
            for archivo in os.listdir():
                if archivo.endswith(".xlsx"):
                    os.remove(archivo)
            # Borrar carpetas de fotos
            carpetas = [d for d in os.listdir() if os.path.isdir(d) and d.startswith("Fotos_")]
            for carpeta in carpetas:
                shutil.rmtree(carpeta)
            # Volver a crear carpetas vac√≠as
            inicializar_carpetas()
            
            st.success("‚úÖ Todos los datos y fotos han sido eliminados correctamente.")
            st.session_state.confirmar_borrado = False  # Reseteamos confirmaci√≥n

    with col2:
        if st.button("‚ùå No, cancelar"):
            st.session_state.confirmar_borrado = False  # Cancelamos la operaci√≥n

